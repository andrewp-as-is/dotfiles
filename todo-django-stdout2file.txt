1) utils
2) decorator
@stdout2file
3) command class
4) call_command
5) hack replace default command
@stdout2file
---
def do_twice(func):
    def wrapper_do_twice(*args, **kwargs):
        func(*args, **kwargs)
    return wrapper_do_twice

да но везде @stdout2file прописывать избыточно
Stdout2FileCommand vs BaseCommand


execute(self)
перезаписывать
--
но еще duration и тд и тп
ОТДЕЛЬНО
---
django_stdout непонятно тк исчо view, куда stdout и тд
---
сложность в том как удалять?
stdout_delete
ну если в Бд то попроще в 1 команду )
---
django-stdout2file.py
stdout2file_delete.py
stdout2file_clean.py
stdout2file_truncate.py
stdout2file_wipe.py

stdout2file_wipe.py timestamp
100500 неоднозначных вариантов
on delete queryset самое однозначное и гибкое конечно
---
delete причем можно быть delete всего или delete старых только
или delete записей в БД
on delete тогда надо и файл удалять

если нет файла то запись в БД тоже можно удалять
stat?
---
django_stdout2file_stdout
django_stdout2file_stat (avg_size,total_size,min_size,max_size)
stdout2file
----
VIEW stdout насколько нужно? для debug то вполне нужно
и... причем не в файл же писать тк еще request info и тд
command там только name (если нет args) и все проще
а view... ну еще статистика запусков конкретного view и тд тоже интересно же Карл

причем вопрос еще как message записывать, только после все 1 в string? response middleware vs ViewMixin/etc
----
django-stdout может быть универсальным command stdout, view stdout и тд :)
view print же может быть и в terminal на месте для DEV удобно тк только 1 чел
но multiple view stdout еще большой вопрос как будет работать в multiple workers/async среде. плохая оч идея
---
id, 1st lines, lines count, size, timestamp, time, timesince
---
django-stdout можно обьединить stdout2db, stdout2file :)
бинго :)
stdout2db_stat.py
stdout2file_stat.py
впрочем можно запускать автоматически тк не сильно много нагрузки это не pg size
stdout2db
stdout2db_stat
stdout2file
stdout2file_stat
---
stdout_command_message так чтоли или как
stdout_command_file
stdout2file
---
django-stderr
django-stderr2db
django-stderr2file
в целом только БД, но... может быть оч много например 100k записей обработка
stderr надо отдельно конечно, не stdout
self.handle_exception(response,e) как вариант
---
naming
django_stderr_message
django_stderr_file
django_stderr2db_message
django_stderr2db_stat

django_stderr_message
django_stderr_message_stat
django_stderr_file
django_stderr_file_stat
files_stat скорее но
messages_stat
как-то тупо. command stat все равно же
---
django_stderr_stat TABLE
django_stderr_stat.py
впрочем... можно все в 1 :)
messages_count
files_count

avg_size (какая разница в файле или message?)
max_size
min_size

max_lines
min_lines
avg_lines

name = TextField(verbose_name='command')


output message or error message to
---
django_stderr_file (name,path,timestamp,size,lines_count)
name = command vs file name
message name тоже не оч понятно тк
command причем может быть name vs name.py vs path.py vs module.py
__file__ __name__ как вариант
---
django_stderr_message
django_stderr_file
django_stderr_stat
---
file временный/tmp все равно нужен
random/default tmp
hardcoded/xxx
----
django_stdout_file
django_stdout_message (command,output)
django_stdout_stat
----
django_stderr_file
django_stderr_message (command,message) output vs message
django_stderr_stat